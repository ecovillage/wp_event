#!/usr/bin/env ruby

require 'wp_event'
require 'optparse'
require 'json'

extend WPEvent::CLI::Logging
extend WPEvent::CLI
extend WPEvent::CLI::Tool

options = {}

option_parser = OptionParser.new do |opts|
  opts.banner = <<~USAGE
    Usage: #{$PROGRAM_NAME} [options] [JSONFILE]

    Write json file with event category information.

  USAGE

  opts.on("-i", "--image-source=URL", "Where to get images from (think about trailing slash!)") do |i|
    options[:image_source] = i
  end
  opts.on("-s", "--image-store=PATH", "Where to store images") do |s|
    options[:image_store] = s
  end

  opts.separator "Filtering options"
  opts.on("-u", "--uuid UUID", "Event Categories UUID") do |u|
    options[:uuid] = u
  end
  opts.separator "Output options"
  opts.on("-o", "--outfile FILE", "File to write data (json) to") do |o|
    options[:outfile] = o
  end
  opts.on("-p", "--pretty-print", "Pretty print the generated json data") do |p|
    options[:pretty_print] = p
  end

  opts.separator "Common options"
  opts.on("-v", "--[no-]verbose", "Run verbosely") do |v|
    options[:verbose] = v
  end
  opts.on_tail("-h", "--help", "Show this message and exit") do
    puts opts
    exit
  end
  opts.on_tail("--version", "Show version and exit") do
    puts WPEvent::VERSION
    exit
  end
end

# Process options
option_parser.parse!

outstream = exit_or_get_out_stream ARGV, options

if !outstream.is_a?(File)
  WPEvent.logger = Logger.new(STDERR)
end

WPEvent.logger.level = options[:verbose] ? Logger::DEBUG : Logger::INFO

if options[:uuid]
  # uuid given
  category = WPEvent::CouchImport::CouchEventCategory.pull_from_couchdb options[:uuid]
  if category.nil?
    exit_with 5, "event category with uuid #{options[:uuid]} not found"
  else
    info "event category with uuid #{options[:uuid]} found"
    debug "Output: #{[category].to_json}"
    debug "Original document: #{category.document}"
    if options[:pretty_print]
      outstream << JSON.pretty_generate([category])
    else
      outstream << [category].to_json
    end
  end
else
  # default, pull all
  debug "Pulling all categories"
  categories = WPEvent::CouchImport::CouchImporter.get_all_categories
  if categories.nil? || categories.empty?
    exit_with 5, "No event categories found!"
  else
    info "#{categories.length} categories found."
    if options[:pretty_print]
      outstream << JSON.pretty_generate(categories)
    else
      outstream << categories.to_json
    end
    debug "Output: #{categories.to_json}"
    info "Wrote #{categories.length} categories to #{options[:outfile]}."
  end
end

exit 0
