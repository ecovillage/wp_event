#!/usr/bin/env ruby

require 'wp_event'

require 'optparse'
require 'json'

extend WPEvent::CLI
extend WPEvent::CLI::Tool

options = {}

option_parser = OptionParser.new do |opts|
  opts.banner = <<~USAGE
    Usage: #{$PROGRAM_NAME} [options] --uuid UUID1,UUID2

    Sync a list of events with events registered in wordpress instance.  Pull these events from a (legacy) couchdb.

    Will exit with 0 on success

  USAGE

  opts.on("-u", "--uuid UUID1,UUID2", "Events UUID(s)", Array) do |u|
    options[:uuids] = u
  end

  opts.on("-s", "--image-store=PATH", "Path where to search images (to upload)") do |s|
    options[:image_store] = s
  end

  opts.separator "Common options"
  opts.on("-v", "--[no-]verbose", "Run verbosely") do |v|
    options[:verbose] = v
  end
  opts.on_tail("-h", "--help", "Show this message and exit") do
    puts opts
    exit
  end
  opts.on_tail("--version", "Show version and exit") do
    puts WPEvent::VERSION
    exit
  end
end

# Process options
option_parser.parse!

WPEvent::CLI::Tool.init_logger verbose: options[:verbose]

debug "Starting event sync (#{WPEvent::VERSION})"

begin
  Compostr.load_conf
rescue Errno::ENOENT
  exit_with 3, "Config file (compostr.conf) not found."
end

if !options[:uuids]
  exit_with 2, "Need one or more UUIDs (specify --uuid UUID1,UUID2)!"
end

begin
  events_json = options[:uuids].map do |uuid|
    event = WPEvent::CouchImport::CouchEvent.pull_from_couchdb uuid
    if event.nil?
      info "event with uuid #{uuid} not found"
    else
      info "event with uuid #{uuid} found"

      warn "Skipping image down and upload"
      #if !event.image_url.to_s.strip.empty? && image_download.ready?
      #  image_download.download! event.image_url
      #end

      debug "Original document: #{event.document}"
      event
    end
  end

  events = JSON.parse events_json.to_json # (array)
  info events
rescue JSON::ParserError => e
  debug $!
  exit_with 5, "Input could not be parsed (valid json?)."
end

event_cache    = Compostr::EntityCache.new(WPEvent::CustomPostTypes::Event)
media_cache    = Compostr::MediaLibraryCache.new
image_uploader = Compostr::ImageUploader.new options[:image_store], media_cache

syncer = Compostr::Syncer.new image_uploader
referee_syncer = WPEvent::LegacyGlue::RefereeSync.new(
  Compostr::EntityCache.new(WPEvent::CustomPostTypes::Referee),
  media_cache,
  image_uploader)

event_factory = WPEvent::EventFactory.new raise_on_missing_referee: true

events.each_with_index do |event, idx|
  uuid = event['uuid']
  info "(#{idx + 1}/#{events.length}) dealing with event with uuid #{uuid}"

  begin
    # 'event' is the new data
    wp_event_content = event_cache.in_mem_lookup uuid
    debug "wp_event_content from cache is #{wp_event_content}"

    begin
      event_from_json  = event_factory.from_json event # Now keys are symbols!
    rescue WPEvent::MissingRefereeError => e
      info "Also syncing missing referees"
      e.missing_referees.each do |missing_referee_uuid|
        info "Syncing missing referee #{missing_referee_uuid}"
        referee = WPEvent::CouchImport::CouchReferee.pull_from_couchdb missing_referee_uuid
        referee_syncer.sync([JSON.parse(referee.to_json)])
        info "Missing referee #{missing_referee_uuid} synced"
      end

      event_factory.referee_cache.flush
      event_from_json  = event_factory.from_json event # Now keys are symbols!
    end

    event_from_wp    = WPEvent::CustomPostTypes::Event.from_content_hash(wp_event_content)

    attachment_id = image_uploader.process(event[:image_url])
    event_from_json.featured_image_id = attachment_id

    if options[:force]
      syncer.merge_push event_from_json, event_from_wp
    else
      diffs = event_from_json.diff(event_from_wp)
      if !diffs.empty?
        syncer.merge_push event_from_json, event_from_wp
      else
        info "#{uuid} is unchanged."
      end
    end

  rescue WPEvent::MissingCategoryError => e
    exit_with 7, "A required category (in #{e.missing_categories}) does not exist, aborting."
  rescue WPEvent::MissingRefereeError => e
    exit_with 8, "A required referee (in uuids: #{e.missing_referees})"\
                 " does not exist, aborting."
  end
end

debug "Finished event sync (#{WPEvent::VERSION})"
exit 0
