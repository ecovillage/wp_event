#!/usr/bin/env ruby

require 'wp_event'
require 'optparse'
require 'optparse/date' # this has to be documented in ruby! (TODO)

require 'json'
require 'date'
require 'fileutils'
require "open-uri"

extend WPEvent::CLI::Logging
extend WPEvent::CLI

options = {}

option_parser = OptionParser.new do |opts|
  opts.banner = <<~USAGE
    Usage: #{$PROGRAM_NAME} [options] JSONFILE

    Write json file with event information (omit JSONFILE and do not specify '--outfile' to write to STDOUT).
    You can use the '--outfile' option to specify where the output shall be written to.  The advantage of the latter option is that #{PROGRAM_NAME} will fail if the file already exist (which will not happen when using redirection with `>`).
  USAGE

  opts.separator "Filtering options"
  opts.on("-f", "--from DATE", DateTime, "Events starting date (YYYY-MM-DD HH:MM)") do |f|
    options[:from] = f
  end
  opts.on("-t", "--to DATE", DateTime, "Events ending date (YYYY-MM-DD HH:MM)") do |t|
    options[:to] = t
  end
  opts.on("-u", "--uuid UUID", "Events UUID") do |u|
    options[:uuid] = u
  end
  opts.on("-i", "--image-source=URL", "Where to get images from (think about trailing slash!)") do |i|
    options[:image_source] = i
  end
  opts.on("-s", "--image-store=PATH", "Where to store images") do |s|
    options[:image_store] = s
  end
  opts.separator "Output options"
  opts.on("-o", "--outfile FILE", "File to write data (json) to, '-' for STDOUT") do |o|
    options[:outfile] = o
  end
  opts.separator "Common options"
  opts.on("-v", "--[no-]verbose", "Run verbosely") do |v|
    options[:verbose] = v
  end
  opts.on_tail("-h", "--help", "Show this message and exit") do
    puts opts
    exit
  end
  opts.on_tail("--version", "Show version and exit") do
    puts WPEvent::VERSION
    exit
  end
end

# Process options
option_parser.parse!

WPEvent.logger.level = options[:verbose] ? Logger::DEBUG : Logger::INFO

if ARGV.length == 1 && options[:outfile]
  exit_with 2, "Cannot specify both --outfile and argument"
elsif ARGV.length == 1
  options[:outfile] = ARGV[0]
end

if !options[:outfile]
  exit_with 2, "Need to specify --outfile (or give as argument)"
end

if options[:outfile] != '-' && File.exist?(options[:outfile])
  exit_with 3, "Outfile #{options[:outfile]} exists, aborting."
end

if options[:outfile] == "-"
  WPEvent.logger = Logger.new(STDERR)
  WPEvent.logger.level = options[:verbose] ? Logger::DEBUG : Logger::INFO
end

if options[:from] && options[:to] && options[:uuid]
  exit_with 2, "Cannot specify --from, --to AND --uuid, aborting."
end

if !!options[:from] != !!options[:to]
  exit_with 2, "Have to specify --from when --to is specified (and vice versa)."
end

if !options[:from] && !options[:to] && !options[:uuid]
  info "Neither time range (--from, --to) nor uuid (--uuid) given, pulling this years events."
  options[:from] = Date.civil(Date.today.year, 1, 1)
  options[:to]   = Date.civil(options[:from].year, 12, 31)
end

if options[:image_store]
  begin
    FileUtils::mkdir_p(options[:image_store])
    info "Created image store directory #{options[:image_store]}"
  rescue Exception => e
    debug "Image store could not be created: #{$@}"
    exit_with 7, "Image store could not be created: #{$!}"
  end
end

image_download = WPEvent::ImageDownload.new options[:image_store], options[:image_source]

if !image_download.ready?
  warn "Image download options not present, Will not download images."
end

outfile = io_out_from_arg(options[:outfile])

if options[:uuid]
  # uuid given
  event = WPEvent::CouchImport::CouchEvent.pull_from_couchdb options[:uuid]
  if event.nil?
    info "event with uuid #{options[:uuid]} not found"
  else
    info "event with uuid #{options[:uuid]} found"

    if !event.image_url.to_s.strip.empty? && image_download.ready?
      image_download.download! event.image_url
    end

    debug "Original document: #{event.document}"
    outfile << [event].to_json
    debug "Output: #{[event].to_json}"
    info "Events found and written to #{options[:outfile]}"
  end
elsif options[:from] && options[:to]
  # Range given
  events = WPEvent::CouchImport::CouchEvent.pull_from_couchdb_between options[:from], options[:to]
  if events.nil? || events.empty?
    info "No matching event found"
  else
    events.each do |event|
      if !event.image_url.to_s.strip.empty? && image_download.ready?
        image_download.download! event.image_url
      end
    end

    outfile << events.to_json
    debug "Output: #{events.to_json}"
    debug "Original: #{events.map(&:document)}"
  end
  info "#{events.count} events found and written to #{options[:outfile]}"
else
  exit_with 5, "No simple default behaviour specified"
end

exit 0
