#!/usr/bin/env ruby

require 'wp_event'
require 'optparse'
require 'json'

extend WPEvent::CLI::Logging
extend WPEvent::CLI
extend WPEvent::CLI::Tool

options = {}

option_parser = OptionParser.new do |opts|
  opts.banner = <<~USAGE
    Usage: #{$PROGRAM_NAME} [options] [JSONFILE]

    Write json file with referee information.

  USAGE

  opts.separator "Filtering options"
  opts.on("-u", "--uuid UUID1,UUID2", "Referee UUID(s)", Array) do |u|
    options[:uuid] = u
  end

  opts.separator "Output options"
  opts.on("-o", "--outfile FILE", "File to write data (json) to, '-' for STDOUT (then log to STDERR)") do |o|
    options[:outfile] = o
  end
  opts.on("-i", "--image-source=URL", "Where to get images from (think about trailing slash!)") do |i|
    options[:image_source] = i
  end
  opts.on("-s", "--image-store=PATH", "Where to store images") do |s|
    options[:image_store] = s
  end
  opts.on("-p", "--pretty-print", "Generate pretty json") do |p|
    options[:pretty_print] = p
  end

  opts.separator "Common options"
  opts.on("-v", "--[no-]verbose", "Run verbosely") do |v|
    options[:verbose] = v
  end
  opts.on_tail("-h", "--help", "Show this message and exit") do
    puts opts
    exit
  end
  opts.on_tail("--version", "Show version and exit") do
    puts WPEvent::VERSION
    exit
  end
end

# Process options
option_parser.parse!

outstream = exit_or_get_out_stream ARGV, options

WPEvent::CLI::Tool.init_logger verbose: options[:verbose],
  stderr: !outstream.is_a?(File)

if options[:image_store]
  begin
    FileUtils::mkdir_p(options[:image_store])
    info "Created image store directory #{options[:image_store]}"
  rescue Exception => e
    debug "Image store could not be created: #{$@}"
    exit_with 7, "Image store could not be created: #{$!}"
  end
end

image_download = WPEvent::ImageDownload.new options[:image_store], options[:image_source]

image_download.prepare!

if options[:uuid]
  # uuid(s) given
  options[:uuid].each do |uuid|
    referee = WPEvent::CouchImport::CouchReferee.pull_from_couchdb uuid
    if referee.nil?
      warn "referee with uuid #{uuid} not found"
      exit 5
    else
      info "referee with uuid #{uuid} found"
      if !referee.image_url.to_s.strip.empty? && image_download.ready?
        image_download.download! referee.image_url
      end
      debug "Output: #{[referee].to_json}"
      debug "Original document: #{referee.document}"
      if options[:pretty_print]
        outstream << JSON.pretty_generate([referee])
      else
        outstream << [referee].to_json
      end
    end
  end
else
  # default, pull all
  referees = WPEvent::CouchImport::CouchImporter.get_all_referees
  if referees.nil? || referees.empty?
    error "No referees found!"
    exit 5
  else
    info "#{referees.length} referees found."
    referees.each do |referee|
      if !referee.image_url.to_s.strip.empty? && image_download.ready?
        image_download.download! referee.image_url
      end
    end
    if options[:pretty_print]
      outstream << JSON.pretty_generate(referees)
    else
      outstream << referees.to_json
    end
    debug "Output: #{referees.to_json}"
  end
end

exit 0
