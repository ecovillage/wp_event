#!/usr/bin/env ruby

require 'wp_event'
require 'optparse'
require 'json'

options = {}

option_parser = OptionParser.new do |opts|
  opts.banner = "Usage: #{$PROGRAM_NAME} [options]"
  opts.separator "The standard: Create or update category with ..."
  opts.on("-u", "--uuid UUID", "Events categories UUID") do |u|
    options[:uuid] = u
  end
  opts.on("-i", "--id WPID", "(Events category) Post ID (WP)") do |i|
    options[:id] = i
  end
  opts.on("--image-file PATH", "Path to image file") do |i|
    options[:image_file] = i
  end
  opts.on("-n", "--name NAME", "Name ('title') of the category") do |n|
    options[:name] = n
  end
  opts.on("-d", "--description DESCRIPTION", "Description of the category") do |d|
    options[:description] = d
  end
  opts.separator "Other actions (than create or update)"
  opts.on("-l", "--list", "List categories") do |l|
    options[:list] = l
  end
  opts.on("-x", "--export", "Export/print query result to STDOUT (json-ish)") do |x|
    options[:export] = x
  end
  opts.separator "Common options"
  opts.on("-v", "--[no-]verbose", "Run verbosely") do |v|
    options[:verbose] = v
  end
  opts.on_tail("-h", "--help", "Show this message and exit") do
    puts opts
    exit
  end
  opts.on_tail("--version", "Show version and exit") do
    puts WPEvent::VERSION
    exit
  end
  opts.separator "Will exit with 0 on success"
end

# Process options
option_parser.parse!


if !options[:id] && !options[:uuid] && !options[:list]
  STDERR.puts "Please provide at least the categories (uu)id or specify an action."
  puts option_parser
  exit 1
end

if options[:id] && options[:uuid]
  STDERR.puts "Cannot handle both id and uuid, please specify only one of these options."
  puts option_parser
  exit 2
end

if (options[:id] || options[:uuid]) && options[:list]
  STDERR.puts "Cannot both list and create/update."
  puts option_parser
  exit 2
end

begin
  Compostr.load_conf
rescue Errno::ENOENT
  STDERR.puts "Config file (compostr.conf) not found."
  exit 3
end


def upload_image file_path, post_id=nil
  data = { name: file_path,
           type: MIME::Types.type_for(file_path).first.to_s,
           bits: XMLRPC::Base64.new(IO.read file_path),
         }
  # post_thumbnail { attachment_id } ...
  data[post_id] = post_id if post_id
  upload = WPEvent::wp.uploadFile(data: data)
  puts "image uploaded"
  id = upload["attachment_id"]
end

category_cache = Compostr::EntityCache.new(WPEvent::CustomPostTypes::Category)

# Actions
if options[:list]
  puts category_cache.name_id_map.to_yaml
  exit 0
end

# Default: Create/Update
# Check existence
if options[:uuid]
  category = category_cache.in_mem_lookup options[:uuid]
  if options[:export]
    if !category
      exit_with 4, "Category not found"
    end
    STDOUT.puts JSON.pretty_generate(category)
    exit 0
  end

  attachment_id = nil
  if file_path = options[:image_file]
    attachment_id = upload_image file_path
  end

  # Export, Update or Create?
  if !category
    category = WPEvent::CustomPostTypes::Category.new uuid: options[:uuid],
                                                      name: options[:name],
                                                      description: options[:description]#,
                                                      # attachment_id
    Compostr::Syncer.new(nil).merge_push event, nil
    post_id = category
  else
    post_id = category["post_id"]
  end
else
  category = category_cache.by_post_id options[:id]
  if options[:export]
    if !category
      exit_with 4, "Category not found"
    end
    STDOUT.puts JSON.pretty_generate(category)
    exit 0
  else
    STDERR.puts "Cannot deal with updates only atm"
    exit 4
  end
end

exit 0
