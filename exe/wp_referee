#!/usr/bin/env ruby

#require 'time'
#require 'date'
require 'wp_event'
require 'json'
require 'optparse/date' # this has to be documented in ruby! (TODO)

extend WPEvent::CLI::Logging
extend WPEvent::CLI

options = {}

option_parser = OptionParser.new do |opts|
  opts.banner = "Usage: #{$PROGRAM_NAME} [options]"
  opts.separator ""
  opts.separator "The standard: Create, update or delete a referee with ..."

  opts.on("-u", "--uuid UUID", "Referees UUID") do |u|
    options[:uuid] = u
  end
  opts.on("-i", "--id WPID", "Post ID (WP)") do |i|
    options[:id] = i
  end
  opts.on("--image-file PATH", "Path to image file") do |i|
    options[:image_file] = i
  end
  opts.on("-f", "--firstname FIRSTNAME", "First Name (part of 'title') of the referee") do |f|
    options[:firstname] = f
  end
  opts.on("-n", "--lastname LASTNAME", "Last Name (part of 'title') of the referee") do |n|
    options[:lastname] = n
  end
  opts.on("-d", "--description DESCRIPTION", "Description of the referee") do |d|
    options[:description] = d
  end
  opts.separator ""
  opts.separator "Other actions (than create or update)"
  opts.on("-l", "--list", "List referees") do |l|
    options[:list] = l
  end
  opts.on("-r", "--delete", "Delete given referee") do |d|
    options[:delete] = d
  end
  opts.on("-x", "--export", "Export/print query result to STDOUT (json-ish)") do |x|
    options[:export] = x
  end
  opts.separator ""
  opts.separator "Common options"
  opts.on("-v", "--[no-]verbose", "Run verbosely") do |v|
    options[:verbose] = v
  end
  opts.on_tail("-h", "--help", "Show this message and exit") do
    puts opts
    exit
  end
  opts.on_tail("--version", "Show version and exit") do
    puts WPEvent::VERSION
    exit
  end
end

# Process options
option_parser.parse!

WPEvent.logger.level = options[:verbose] ? Logger::DEBUG : Logger::INFO

if !options[:id] && !options[:uuid] && !options[:list]
  STDERR.puts "Please provide at least the referees (uu)id or specify the list action."
  puts option_parser
  exit 1
end

if options[:delete] && !options[:uuid] && !options[:id]
  exit_with 3, "Need to specify referee to delete (by --uuid or --id)."
end

if options[:id] && options[:uuid]
  STDERR.puts "Cannot handle both id and uuid, please specify only one of these options."
  puts option_parser
  exit 2
end

begin
  Compostr.load_conf
rescue Errno::ENOENT
  STDERR.puts "Config file (compostr.conf) not found."
  exit 3
end

referee_cache = Compostr::EntityCache.new(WPEvent::CustomPostTypes::Referee)

if options[:list]
  # uuid, name
  puts referee_cache.name_pid_map.to_yaml
  exit 0
end

# Check existence
if options[:uuid]
  referee = referee_cache.in_mem_lookup options[:uuid]
  if options[:export]
    if !referee
      exit_with 4, "Referee not found"
    end
    STDOUT.puts JSON.pretty_generate(referee)
    exit 0
  end

  if options[:delete]
    referee = WPEvent::RefereePost.uuid_in_wordpress? options[:uuid]
    if !referee
      exit_with 3, "Referee not found"
    end
    if deletion=WPEvent.delete_post(referee['post_id'])
      info "Referee deleted"
    else
      info "Referee not deleted"
    end
  end

  if !referee && (!(options[:firstname] && options[:lastname]) || !options[:description])
    STDERR.puts "Need to specify --firstname, --lastname and --description to create a referee."
    exit 6
  end

  if !referee
    attachment_id = nil
    if file_path = options[:image_file]
      upload = WPEvent::ImageUpload.new file_path # no post_id yet ...
      attachment_id = upload.do_upload!
      info "Image uploaded (#{attachment_id})"
    end

    referee = WPEvent::CustomPostTypes::Referee.new(
      uuid:      options[:uuid],
      firstname: options[:firstname],
      lastname:  options[:lastname],
      content:   options[:description],
      featured_image_id: attachment_id
    )

    info "referee created (#{referee})"
    post_id = referee
  else
    puts "found, wont update, maybe(nyi)"
    post_id = referee["post_id"]
  end
else
  referee = referee_cache.by_post_id options[:id]
  if options[:export]
    if !referee
      exit_with 4, "Referee not found"
    end
    STDOUT.puts JSON.pretty_generate(referee)
    exit 0
  else
    STDERR.puts "Cannot deal with updates only atm"
    exit 4
  end
end

exit 0
