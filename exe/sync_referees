#!/usr/bin/env ruby

require 'wp_event'
require 'optparse'
require 'json'

extend WPEvent::CLI::Logging
extend WPEvent::CLI

options = {}

option_parser = OptionParser.new do |opts|
  opts.banner = <<~USAGE
    Usage: #{$PROGRAM_NAME} [options] FILE

    Sync a list of referees with referees registered in wordpress instance

    FILE is supposed to be a json array of hashes (uuid:, firstname:, lastname:, description:, image_url:)
    Alternatively, will read from STDIN.
    Will exit with 0 on success

  USAGE

  opts.on("-s", "--image-store=PATH", "Path where to search images (to upload)") do |s|
    options[:image_store] = s
  end

  opts.separator "Common options"
  opts.on("-v", "--[no-]verbose", "Run verbosely") do |v|
    options[:verbose] = v
  end
  opts.on_tail("-h", "--help", "Show this message and exit") do
    puts opts
    exit
  end
  opts.on_tail("--version", "Show version and exit") do
    puts WPEvent::VERSION
    exit
  end
end

# Process options
option_parser.parse!

WPEvent.logger.level = options[:verbose] ? Logger::DEBUG : Logger::INFO

WPEvent.logger.debug "Starting referee sync (#{WPEvent::VERSION})"


if ARGV.length != 1 && STDIN.tty?
  STDERR.puts "Please provide json input file."
  puts option_parser
  exit 1
end

begin
  WPEvent.load_conf
rescue Errno::ENOENT
  exit_with 3, "Config file (wp_event.conf) not found."
end

input = ARGV.length == 1 ? File.open(ARGV[0]) : STDIN
json = input.read

referees = JSON.parse json
# nicer parse error display, begin..rescue

media_cache    = WPEvent::MediaLibraryCache.new
image_uploader = WPEvent::ImageUploader.new options[:image_store], media_cache

syncer = WPEvent::RefereeSyncer.new media_cache, image_uploader

referees.each_with_index do |referee, idx|

  wp_referee = WPEvent::RefereePost.uuid_in_wordpress? referee["uuid"]

  info "(#{idx + 1}/#{referees.length}): Processing referee with uuid #{referee['uuid']}"
  syncer.create_or_update wp_referee, referee

end

exit 0
