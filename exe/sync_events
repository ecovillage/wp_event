#!/usr/bin/env ruby

require 'wp_event'
require 'optparse'
require 'json'

extend WPEvent::CLI::Logging
extend WPEvent::CLI

options = {}

option_parser = OptionParser.new do |opts|
  opts.banner = <<~USAGE
    Usage: #{$PROGRAM_NAME} [options] FILE

    Sync a list of events with events registered in wordpress instance.

    FILE is supposed to be a json array of hashes (uuid:, name:, description:, fromdate:, todate:, category_names:, referee_qualifications: [{uuid:, qualification:}])
    Will exit with 0 on success

  USAGE

  opts.separator "Common options"
  opts.on("-v", "--[no-]verbose", "Run verbosely") do |v|
    options[:verbose] = v
  end
  opts.on_tail("-h", "--help", "Show this message and exit") do
    puts opts
    exit
  end
  opts.on_tail("--version", "Show version and exit") do
    puts WPEvent::VERSION
    exit
  end
end

# Process options
option_parser.parse!

WPEvent.logger.level = options[:verbose] ? Logger::DEBUG : Logger::INFO

debug "Starting event sync (#{WPEvent::VERSION})"

if ARGV.length != 1
  STDERR.puts "Please provide json input file."
  puts option_parser
  exit 1
end

begin
  WPEvent.load_conf
rescue Errno::ENOENT
  errxit "Config file (wp_event.conf) not found.", 3
end

category_cache = WPEvent::EntityCache.new(WPEvent::CategoryPost)
referee_cache  = WPEvent::EntityCache.new(WPEvent::RefereePost)

events = JSON.parse File.read(ARGV[0])


events.each_with_index do |event, idx|
  # Fetch and memoize category ids.
  category_ids = category_cache.id_of_names event["category_names"]
  if category_ids.include?(nil)
    errxit 7, "A required category does not exist, aborting."
  end

  # from {uuid: 1, q: '2'} we need {id: 123, q: '2'}
  referee_data = (event["referee_qualifications"] || []).map do |ref_qua|
    { id: referee_cache.id_of_uuid(ref_qua["uuid"]),
      qualification: ref_qua["qualification"] }
  end

  if missing_referee = referee_data.detect {|r| r[:id].nil?}
    errxit 8, "A required referee (in #{event['referee_qualifications'].map{|r| r["uuid"]}}) does not exist, aborting."
  end

  wp_event = WPEvent::EventPost.uuid_in_wordpress? event["uuid"]
  if wp_event
    info "(#{idx + 1}/#{events.length}) event with uuid #{event['uuid']} found"
    debug wp_event
  else
    info "(#{idx + 1}/#{events.length}) event with uuid #{event['uuid']} not found, creating"
    wp_event = WPEvent::EventPost.create event["uuid"],
                                         event["name"],
                                         DateTime.parse(event["fromdate"])..DateTime.parse(event["todate"]),
                                         event["description"],
                                         category_ids,
                                         referee_data
    debug "created: #{wp_event}"
  end
end

exit 0
