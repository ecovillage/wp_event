#!/usr/bin/env ruby

require 'wp_event'
require 'optparse'
require 'json'

extend WPEvent::Logging

options = {}

option_parser = OptionParser.new do |opts|
  opts.banner = <<~USAGE
    Usage: #{$PROGRAM_NAME} [options] FILE

    Sync a list of events with events registered in wordpress instance.

    FILE is supposed to be a json array of hashes (uuid:, name:, description:, fromdate:, todate:, category_names:)
    Will exit with 0 on success

  USAGE

  opts.separator "Common options"
  opts.on("-v", "--[no-]verbose", "Run verbosely") do |v|
    options[:verbose] = v
  end
  opts.on_tail("-h", "--help", "Show this message and exit") do
    puts opts
    exit
  end
  opts.on_tail("--version", "Show version and exit") do
    puts WPEvent::VERSION
    exit
  end
end

# Process options
option_parser.parse!

WPEvent.logger.level = options[:verbose] ? Logger::DEBUG : Logger::INFO

debug "Starting event sync (#{WPEvent::VERSION})"

if ARGV.length != 1
  STDERR.puts "Please provide json input file."
  puts option_parser
  exit 1
end

begin
  WPEvent.load_conf
rescue Errno::ENOENT
  STDERR.puts "Config file (wp_event.conf) not found."
  exit 3
end

cached_categories = nil

events = JSON.parse File.read(ARGV[0])

events.each do |event|
  # Fetch and memoize category ids.
  category_ids = []
  if event["category_names"]
    if cached_categories.nil?
      cached_categories = WPEvent::CategoryPost.fetch_name_pid_map
    end
    category_ids = (event["category_names"] || []).map {|cn| cached_categories[cn]}
    if category_ids.include?(nil)
      STDERR.puts "A required category does not exist, aborting."
      error "A required category does not exist, aborting."
      exit 7
    end
  end

  wp_event = WPEvent::EventPost.uuid_in_wordpress? event["uuid"]
  if wp_event
    info "event with uuid #{event['uuid']} found"
  else
    info "event with uuid #{event['uuid']} not found, creating"
    wp_event = WPEvent::EventPost.create event["uuid"],
                                         event["name"],
                                         DateTime.parse(event["fromdate"])..DateTime.parse(event["todate"]),
                                         event["description"],
                                         category_ids
    debug "created: #{wp_event}"
  end
end

exit 0
