#!/usr/bin/env ruby

require 'wp_event'
require 'optparse'
require 'json'

extend WPEvent::CLI
extend WPEvent::CLI::Tool
extend WPEvent::CLI::Logging

options = {}

option_parser = OptionParser.new do |opts|
  opts.banner = <<~USAGE
    Usage: #{$PROGRAM_NAME} [options] FILE

    Sync a list of event categories with event categories registered in wordpress instance

    FILE is supposed to be a json array of hashes (uuid:, name:, description:, image_url:)
    Will exit with 0 on success

  USAGE

  opts.on("", "--show-diff-only", "Only show differences (do not sync, kind of dry-run)") do |d|
    options[:show_diff_only] = d
  end

  opts.separator "Common options"
  opts.on("-v", "--[no-]verbose", "Run verbosely") do |v|
    options[:verbose] = v
  end
  opts.on_tail("-h", "--help", "Show this message and exit") do
    puts opts
    exit
  end
  opts.on_tail("--version", "Show version and exit") do
    puts WPEvent::VERSION
    exit
  end
end

# Process options
option_parser.parse!

WPEvent::CLI::Tool.init_logger verbose: options[:verbose]

debug "Starting event category sync (#{WPEvent::VERSION})"

# Dont we have the tools library for that?
if ARGV.length != 1
  STDERR.puts "Please provide json input file."
  puts option_parser
  exit 1
end

begin
  Compostr.load_conf
rescue Errno::ENOENT
  exit_with 3, "Config file (compostr.conf) not found."
end

category_cache  = Compostr::EntityCache.new(WPEvent::CustomPostTypes::Category)
#TODO image?
media_cache    = Compostr::MediaLibraryCache.new
image_uploader = Compostr::ImageUploader.new options[:image_store], media_cache
syncer = Compostr::Syncer.new image_uploader

categories = JSON.parse File.read(ARGV[0])

categories.each_with_index do |json_category, idx|
  # TODO add images here or only within Syncer?

  wp_category = category_cache.in_mem_lookup(json_category["uuid"])

  info "(#{idx + 1}/#{categories.length}): Processing category with uuid #{json_category['uuid']}: #{wp_category.nil? ? 'create': 'update'}"

  # Transform string keys to symbol keys.
  # This **could** be done directly while parsing the json:
  #   x = JSON.parse json, symbolize_names: true
  json_category.keys.each do |key|
    json_category[(key.to_sym rescue key) || key] = json_category.delete(key)
  end

  category = WPEvent::CustomPostTypes::Category.new(**json_category)
  wp_cat   = WPEvent::CustomPostTypes::Category.from_content_hash(wp_category)

  diffs = category.diff(wp_cat)
  if !diffs.empty?
    if options[:show_diff_only]
      if wp_cat.nil? || wp_cat.uuid.nil?
        info "Category is new (not found in wordpress)"
      else
        info "Differences for #{category.uuid} (local/remote)"
        info "  #{diffs}"
      end
    else
      sync_result = syncer.merge_push(category, wp_cat)
    end
  else
    info "#{category.uuid} is unchanged."
  end


  #  # Attach image?
  #  # post_id post_title post_content
  #  # {"uuid", "name", "description"}
end

debug "Finished event category sync (#{WPEvent::VERSION})"
exit 0
