#!/usr/bin/env ruby

require 'wp_event'
require 'optparse'
require 'json'
require 'optparse/date' # this has to be documented in ruby! (TODO)

extend WPEvent::CLI::Logging
extend WPEvent::CLI
extend WPEvent::CLI::Tool

options = {}

option_parser = OptionParser.new do |opts|
  opts.banner = "Usage: #{$PROGRAM_NAME} [options]"
  opts.separator ""
  opts.separator "Default action: Update, Create or delete an event with ..."
  opts.on("-u", "--uuid UUID", "Events UUID") do |u|
    options[:uuid] = u
  end
  opts.on("-f", "--from DATETIME", DateTime, "Events starting date as YYYY-MM-DD HH:MM") do |f|
    options[:from] = f
  end
  opts.on("-t", "--to DATETIME", DateTime, "Events ending date as YYYY-MM-DD HH:MM") do |t|
    options[:to] = t
  end
  opts.on("-i", "--id WPID", "Post ID (WP)") do |i|
    options[:id] = i
  end
  opts.on("--image-file PATH", "Path to image file") do |i|
    options[:image_file] = i
  end
  opts.on("-n", "--name NAME", "Name ('title') of the event") do |n|
    options[:name] = n
  end
  opts.on("-c", "--categories NAMES", Array, "Names of categories of the event, comma-separated") do |c|
    options[:categories] = c
  end
  opts.on("-d", "--description DESCRIPTION", "Description of the event") do |d|
    options[:description] = d
  end
  opts.separator ""
  opts.separator "Other actions (than create or update)"
  opts.on("-l", "--list", "List events") do |l|
    options[:list] = l
  end
  opts.on("-x", "--export", "Export/print query result to STDOUT (json-ish)") do |x|
    options[:export] = x
  end
  opts.separator ""
  opts.separator "Common options"
  opts.on("-v", "--[no-]verbose", "Run verbosely") do |v|
    options[:verbose] = v
  end
  opts.on_tail("-h", "--help", "Show this message and exit") do
    puts opts
    exit
  end
  opts.on_tail("--version", "Show version and exit") do
    puts WPEvent::VERSION
    exit
  end
end

# Process options
option_parser.parse!

WPEvent::CLI::Tool.init_logger verbose: options[:verbose]

if !options[:id] && !options[:uuid] && !options[:list]
  STDERR.puts "Please provide at least the events (uu)id or specify the list action."
  puts option_parser
  exit 1
end

if options[:id] && options[:uuid]
  STDERR.puts "Cannot handle both id and uuid, please specify only one of these options."
  puts option_parser
  exit 2
end

begin
  Compostr.load_conf
rescue Errno::ENOENT
  STDERR.puts "Config file (compostr.conf) not found."
  exit 3
end

event_cache = Compostr::EntityCache.new(WPEvent::CustomPostTypes::Event)

if options[:list]
  puts event_cache.name_id_map.to_yaml
  exit 0
end

# Check existence
if options[:uuid]
  event = event_cache.in_mem_lookup options[:uuid]
  if options[:export]
    if !event
      exit_with 4, "Event not found"
    end
    STDOUT.puts JSON.pretty_generate(event)
    exit 0
  end

  if !event && (!options[:from] || !options[:to] || !options[:name] || !options[:description])
    STDERR.puts "Need to specify --to, --from, --name and --description to create an event."
    exit 6
  end

  category_cache = Compostr::EntityCache.new(WPEvent::CustomPostTypes::Category)
  referee_cache  = Compostr::EntityCache.new(WPEvent::CustomPostTypes::Referee)

  # Export, Update or Create?
  if !event
    category_ids = category_cache.id_of_names options[:categories]

    if category_ids.include?(nil)
      exit_with 7, "Some categories do not yet exist, aborting."
    else
      info "All categories found"
      debug "category ids: #{category_ids.join('\n')}"
    end

    attachment_id = nil
    if file_path = options[:image_file]
      upload = WPEvent::ImageUpload.new file_path # no post_id yet ...
      attachment_id = upload.do_upload!
      info "Image uploaded (#{attachment_id})"
    end

    event = WPEvent::CustomPostTypes::Event.new uuid: options[:uuid],
                                      name:     options[:name],
                                      fromdate: options[:from].to_time.to_i,
                                      todate:   options[:to].to_time.to_i,
                                      description: options[:description]#,
                                      #category_ids,
                                      #attachment_id || nil

    Compostr::Syncer.new(nil).merge_push event, nil
    info "event created (#{event.post_id})"
    post_id = event
  else
    post_id = event["post_id"]
  end
else
  event = event_cache.by_post_id options[:id]
  if options[:export]
    if !event
      exit_with 4, "Event not found"
    end
    STDOUT.puts JSON.pretty_generate(event)
    exit 0
  else
    exit_with 4, "Cannot deal with updates only atm"
  end
end

exit 0
